{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"E:\\\\algoupdated project\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useState, useCallback } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, Circle, useMap, LayerGroup, Tooltip } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport L from \"leaflet\";\nimport { TrafficLight } from \"./components/TrafficLight\";\nimport { VehicleRouting } from \"./components/VehicleRouting\";\nimport { TrafficDashboard } from \"./components/TrafficDashboard\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { ControlPanel } from \"./components/ControlPanel\";\nimport { Analytics } from \"./components/Analytics\";\nimport { Toast } from \"./components/Toast\";\n\n// Fix Leaflet icon issue\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nL.Icon.Default.imagePath = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/\";\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: `${L.Icon.Default.imagePath}/marker-icon-2x.png`,\n  iconUrl: `${L.Icon.Default.imagePath}/marker-icon.png`,\n  shadowUrl: `${L.Icon.Default.imagePath}/marker-shadow.png`\n});\n\n// Custom icons for traffic lights\nconst greenLightIcon = new L.Icon({\n  iconUrl: \"/green-light.svg\",\n  iconSize: [25, 25]\n});\nconst redLightIcon = new L.Icon({\n  iconUrl: \"/red-light.svg\",\n  iconSize: [25, 25]\n});\nconst yellowLightIcon = new L.Icon({\n  iconUrl: \"/yellow-light.svg\",\n  iconSize: [25, 25]\n});\n\n// Custom vehicle icon\nconst vehicleIcon = new L.Icon({\n  iconUrl: \"/vehicle.svg\",\n  iconSize: [20, 20]\n});\n\n// Custom vehicle icons based on type\nconst carIcon = new L.Icon({\n  iconUrl: \"/car.svg\",\n  iconSize: [24, 24]\n});\nconst busIcon = new L.Icon({\n  iconUrl: \"/bus.svg\",\n  iconSize: [28, 28]\n});\nconst truckIcon = new L.Icon({\n  iconUrl: \"/truck.svg\",\n  iconSize: [30, 30]\n});\n\n// MapUpdater component to handle map updates\nfunction MapUpdater({\n  center,\n  zoom\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    map.setView(center, zoom);\n  }, [center, zoom, map]);\n  return null;\n}\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nfunction App() {\n  _s2();\n  var _vehicles$find, _vehicles$find2;\n  const [cityGraph, setCityGraph] = useState(null);\n  const [trafficLights, setTrafficLights] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  const [incidents, setIncidents] = useState([]);\n  const [congestionLevels, setCongestionLevels] = useState({});\n  const [selectedVehicle, setSelectedVehicle] = useState(null);\n  const [mapCenter, setMapCenter] = useState([37.7749, -122.4194]); // Default: San Francisco\n  const [mapZoom, setMapZoom] = useState(13);\n  const [isConnected, setIsConnected] = useState(false);\n  const [simulationRunning, setSimulationRunning] = useState(false);\n  const [cityName, setCityName] = useState(\"San Francisco\");\n  const [availableCities, setAvailableCities] = useState([\"San Francisco\", \"New York\", \"Chicago\", \"Boston\", \"Seattle\"]);\n  const [activeTab, setActiveTab] = useState(\"map\");\n  const [toast, setToast] = useState({\n    message: \"\",\n    type: \"\",\n    visible: false\n  });\n  const [simulationSpeed, setSimulationSpeed] = useState(1);\n  const [trafficLightMode, setTrafficLightMode] = useState(\"auto\");\n  const [routingAlgorithm, setRoutingAlgorithm] = useState(\"a_star\");\n  const [showCongestion, setShowCongestion] = useState(true);\n  const [showVehicles, setShowVehicles] = useState(true);\n  const [showTrafficLights, setShowTrafficLights] = useState(true);\n  const [showIncidents, setShowIncidents] = useState(true);\n  const [analyticsData, setAnalyticsData] = useState({\n    averageSpeed: 0,\n    averageWaitTime: 0,\n    congestionTrend: [],\n    trafficLightEfficiency: 0,\n    vehicleCountHistory: [],\n    incidentHistory: []\n  });\n  const [manualLightControl, setManualLightControl] = useState({\n    nodeId: null,\n    state: \"red\"\n  });\n\n  // Show toast message\n  const showToast = useCallback((message, type = \"info\") => {\n    setToast({\n      message,\n      type,\n      visible: true\n    });\n    setTimeout(() => {\n      setToast(prev => ({\n        ...prev,\n        visible: false\n      }));\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    // Connect to WebSocket server\n    const socket = io(\"http://localhost:8000\", {\n      transports: [\"websocket\"],\n      path: \"/ws/socket.io\"\n    });\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to WebSocket server\");\n      setIsConnected(true);\n      showToast(\"Connected to server\", \"success\");\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setIsConnected(false);\n      showToast(\"Disconnected from server\", \"error\");\n    });\n    socket.on(\"city_graph\", data => {\n      console.log(\"Received city graph:\", data);\n      setCityGraph(data);\n\n      // Set map center to the first node in the graph\n      if (data.nodes && data.nodes.length > 0) {\n        setMapCenter([data.nodes[0].lat, data.nodes[0].lon]);\n      }\n    });\n    socket.on(\"traffic_lights\", data => {\n      console.log(\"Received traffic lights:\", data);\n      setTrafficLights(data);\n    });\n    socket.on(\"vehicles\", data => {\n      console.log(\"Received vehicles:\", data);\n      setVehicles(data);\n    });\n    socket.on(\"incidents\", data => {\n      console.log(\"Received incidents:\", data);\n      setIncidents(data);\n    });\n    socket.on(\"congestion\", data => {\n      console.log(\"Received congestion levels:\", data);\n      setCongestionLevels(data);\n    });\n    socket.on(\"analytics\", data => {\n      console.log(\"Received analytics data:\", data);\n      setAnalyticsData(data);\n    });\n    socket.on(\"simulation_status\", data => {\n      console.log(\"Simulation status:\", data);\n      setSimulationRunning(data.running);\n      if (data.message) {\n        showToast(data.message, data.status);\n      }\n    });\n\n    // Clean up on component unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, [showToast]);\n  const startSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/start\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        city: cityName,\n        speed: simulationSpeed,\n        routing_algorithm: routingAlgorithm,\n        traffic_light_mode: trafficLightMode\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Simulation started:\", data);\n      if (data.status === \"success\") {\n        setSimulationRunning(true);\n        showToast(data.message, \"success\");\n      } else {\n        showToast(data.message, \"error\");\n      }\n    }).catch(error => {\n      console.error(\"Error starting simulation:\", error);\n      showToast(\"Error starting simulation\", \"error\");\n    });\n  };\n  const stopSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/stop\", {\n      method: \"POST\"\n    }).then(response => response.json()).then(data => {\n      console.log(\"Simulation stopped:\", data);\n      if (data.status === \"success\") {\n        setSimulationRunning(false);\n        showToast(data.message, \"success\");\n      } else {\n        showToast(data.message, \"error\");\n      }\n    }).catch(error => {\n      console.error(\"Error stopping simulation:\", error);\n      showToast(\"Error stopping simulation\", \"error\");\n    });\n  };\n  const addIncident = (lat, lon, type) => {\n    fetch(\"http://localhost:8000/incidents/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        lat,\n        lon,\n        type\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Incident added:\", data);\n      if (data.status === \"success\") {\n        showToast(`${type.charAt(0).toUpperCase() + type.slice(1)} incident reported`, \"success\");\n      } else {\n        showToast(data.message, \"error\");\n      }\n    }).catch(error => {\n      console.error(\"Error adding incident:\", error);\n      showToast(\"Error reporting incident\", \"error\");\n    });\n  };\n  const changeCity = city => {\n    setCityName(city);\n    // Reset simulation if running\n    if (simulationRunning) {\n      stopSimulation();\n    }\n    showToast(`City changed to ${city}`, \"info\");\n  };\n  const updateSimulationSettings = settings => {\n    fetch(\"http://localhost:8000/simulation/settings\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(settings)\n    }).then(response => response.json()).then(data => {\n      console.log(\"Settings updated:\", data);\n      if (data.status === \"success\") {\n        showToast(\"Simulation settings updated\", \"success\");\n\n        // Update local state\n        if (settings.speed !== undefined) setSimulationSpeed(settings.speed);\n        if (settings.routing_algorithm !== undefined) setRoutingAlgorithm(settings.routing_algorithm);\n        if (settings.traffic_light_mode !== undefined) setTrafficLightMode(settings.traffic_light_mode);\n      } else {\n        showToast(data.message, \"error\");\n      }\n    }).catch(error => {\n      console.error(\"Error updating settings:\", error);\n      showToast(\"Error updating settings\", \"error\");\n    });\n  };\n  const controlTrafficLight = (nodeId, state) => {\n    fetch(\"http://localhost:8000/traffic_lights/control\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        node_id: nodeId,\n        state\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Traffic light controlled:\", data);\n      if (data.status === \"success\") {\n        showToast(`Traffic light ${nodeId} set to ${state}`, \"success\");\n        setManualLightControl({\n          nodeId,\n          state\n        });\n      } else {\n        showToast(data.message, \"error\");\n      }\n    }).catch(error => {\n      console.error(\"Error controlling traffic light:\", error);\n      showToast(\"Error controlling traffic light\", \"error\");\n    });\n  };\n  const addVehicle = (origin, destination, type = \"car\") => {\n    fetch(\"http://localhost:8000/vehicles/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        origin,\n        destination,\n        type\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Vehicle added:\", data);\n      if (data.status === \"success\") {\n        showToast(`New ${type} added to simulation`, \"success\");\n      } else {\n        showToast(data.message, \"error\");\n      }\n    }).catch(error => {\n      console.error(\"Error adding vehicle:\", error);\n      showToast(\"Error adding vehicle\", \"error\");\n    });\n  };\n  const getVehicleIcon = vehicle => {\n    switch (vehicle.type) {\n      case \"bus\":\n        return busIcon;\n      case \"truck\":\n        return truckIcon;\n      default:\n        return carIcon;\n    }\n  };\n  const getTrafficLightIcon = light => {\n    switch (light.state) {\n      case \"green\":\n        return greenLightIcon;\n      case \"yellow\":\n        return yellowLightIcon;\n      default:\n        return redLightIcon;\n    }\n  };\n  const getCongestionColor = level => {\n    if (level < 0.3) return \"#4ade80\"; // green\n    if (level < 0.6) return \"#fb923c\"; // orange\n    return \"#ef4444\"; // red\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isConnected: isConnected,\n      simulationRunning: simulationRunning,\n      startSimulation: startSimulation,\n      stopSimulation: stopSimulation,\n      cityName: cityName,\n      availableCities: availableCities,\n      changeCity: changeCity,\n      vehicles: vehicles,\n      selectedVehicle: selectedVehicle,\n      setSelectedVehicle: setSelectedVehicle,\n      addIncident: addIncident,\n      activeTab: activeTab,\n      setActiveTab: setActiveTab,\n      simulationSpeed: simulationSpeed,\n      trafficLightMode: trafficLightMode,\n      routingAlgorithm: routingAlgorithm,\n      updateSimulationSettings: updateSimulationSettings,\n      addVehicle: addVehicle,\n      showCongestion: showCongestion,\n      setShowCongestion: setShowCongestion,\n      showVehicles: showVehicles,\n      setShowVehicles: setShowVehicles,\n      showTrafficLights: showTrafficLights,\n      setShowTrafficLights: setShowTrafficLights,\n      showIncidents: showIncidents,\n      setShowIncidents: setShowIncidents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [activeTab === \"map\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TrafficDashboard, {\n          trafficLights: trafficLights,\n          vehicles: vehicles,\n          incidents: incidents,\n          congestionLevels: congestionLevels,\n          analyticsData: analyticsData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map-container\",\n          children: /*#__PURE__*/_jsxDEV(MapContainer, {\n            center: mapCenter,\n            zoom: mapZoom,\n            style: {\n              height: \"100%\",\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(MapUpdater, {\n              center: mapCenter,\n              zoom: mapZoom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n              attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this), cityGraph && cityGraph.edges && showCongestion && /*#__PURE__*/_jsxDEV(LayerGroup, {\n              children: cityGraph.edges.map((edge, index) => {\n                const congestion = congestionLevels[edge.id] || 0;\n                const color = getCongestionColor(congestion);\n                const weight = 3 + congestion * 5; // Thicker lines for more congestion\n\n                return /*#__PURE__*/_jsxDEV(Polyline, {\n                  positions: [[edge.source_lat, edge.source_lon], [edge.target_lat, edge.target_lon]],\n                  color: color,\n                  weight: weight,\n                  opacity: 0.8,\n                  children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                    sticky: true,\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: edge.name || `Road ${edge.id}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 451,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [\"Congestion: \", (congestion * 100).toFixed(0), \"%\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 452,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [\"Vehicles: \", edge.vehicle_count || 0]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 453,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [\"Travel time: \", Math.round(edge.travel_time), \" sec\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 454,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 450,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 27\n                  }, this)\n                }, `edge-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, this), showTrafficLights && /*#__PURE__*/_jsxDEV(LayerGroup, {\n              children: trafficLights.map((light, index) => /*#__PURE__*/_jsxDEV(Marker, {\n                position: [light.lat, light.lon],\n                icon: getTrafficLightIcon(light),\n                children: /*#__PURE__*/_jsxDEV(Popup, {\n                  children: /*#__PURE__*/_jsxDEV(TrafficLight, {\n                    id: light.id,\n                    state: light.state,\n                    nextChange: light.next_change,\n                    queueLength: light.queue_length,\n                    controlTrafficLight: controlTrafficLight,\n                    trafficLightMode: trafficLightMode\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 473,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 25\n                }, this)\n              }, `light-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 19\n            }, this), showVehicles && /*#__PURE__*/_jsxDEV(LayerGroup, {\n              children: vehicles.map((vehicle, index) => /*#__PURE__*/_jsxDEV(Marker, {\n                position: [vehicle.lat, vehicle.lon],\n                icon: getVehicleIcon(vehicle),\n                zIndexOffset: selectedVehicle === vehicle.id ? 1000 : 0,\n                children: /*#__PURE__*/_jsxDEV(Popup, {\n                  children: /*#__PURE__*/_jsxDEV(VehicleRouting, {\n                    id: vehicle.id,\n                    type: vehicle.type || \"car\",\n                    origin: vehicle.origin,\n                    destination: vehicle.destination,\n                    currentRoute: vehicle.current_route,\n                    eta: vehicle.eta,\n                    speed: vehicle.speed,\n                    status: vehicle.status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 498,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 25\n                }, this)\n              }, `vehicle-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 19\n            }, this), selectedVehicle && ((_vehicles$find = vehicles.find(v => v.id === selectedVehicle)) === null || _vehicles$find === void 0 ? void 0 : _vehicles$find.current_route) && /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: (_vehicles$find2 = vehicles.find(v => v.id === selectedVehicle)) === null || _vehicles$find2 === void 0 ? void 0 : _vehicles$find2.current_route.map(point => [point.lat, point.lon]),\n              color: \"#3b82f6\",\n              weight: 5,\n              dashArray: \"10, 10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 19\n            }, this), showIncidents && /*#__PURE__*/_jsxDEV(LayerGroup, {\n              children: incidents.map((incident, index) => /*#__PURE__*/_jsxDEV(Circle, {\n                center: [incident.lat, incident.lon],\n                radius: 100,\n                color: incident.type === \"accident\" ? \"#ef4444\" : incident.type === \"construction\" ? \"#f59e0b\" : \"#fb923c\",\n                fillColor: incident.type === \"accident\" ? \"#ef4444\" : incident.type === \"construction\" ? \"#f59e0b\" : \"#fb923c\",\n                fillOpacity: 0.5,\n                children: /*#__PURE__*/_jsxDEV(Popup, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"incident-popup\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                      children: incident.type.charAt(0).toUpperCase() + incident.type.slice(1)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 552,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Reported at: \", new Date(incident.timestamp * 1000).toLocaleTimeString()]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 553,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Expected clearance: \", new Date(incident.expected_clearance * 1000).toLocaleTimeString()]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 554,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"incident-severity\",\n                      children: [\"Severity:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: `severity-${incident.severity || \"medium\"}`,\n                        children: incident.severity || \"Medium\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 559,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 557,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 551,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 25\n                }, this)\n              }, `incident-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), activeTab === \"control\" && /*#__PURE__*/_jsxDEV(ControlPanel, {\n        trafficLights: trafficLights,\n        vehicles: vehicles,\n        controlTrafficLight: controlTrafficLight,\n        addVehicle: addVehicle,\n        cityGraph: cityGraph,\n        trafficLightMode: trafficLightMode,\n        manualLightControl: manualLightControl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 11\n      }, this), activeTab === \"analytics\" && /*#__PURE__*/_jsxDEV(Analytics, {\n        analyticsData: analyticsData,\n        vehicles: vehicles,\n        trafficLights: trafficLights,\n        incidents: incidents,\n        congestionLevels: congestionLevels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      message: toast.message,\n      type: toast.type,\n      visible: toast.visible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"8A95WjHCoDJGddK6AEyelxhI5Dw=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","useEffect","useState","useCallback","MapContainer","TileLayer","Marker","Popup","Polyline","Circle","useMap","LayerGroup","Tooltip","io","L","TrafficLight","VehicleRouting","TrafficDashboard","Sidebar","ControlPanel","Analytics","Toast","jsxDEV","_jsxDEV","Fragment","_Fragment","Icon","Default","imagePath","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","greenLightIcon","iconSize","redLightIcon","yellowLightIcon","vehicleIcon","carIcon","busIcon","truckIcon","MapUpdater","center","zoom","map","setView","_c","App","_vehicles$find","_vehicles$find2","cityGraph","setCityGraph","trafficLights","setTrafficLights","vehicles","setVehicles","incidents","setIncidents","congestionLevels","setCongestionLevels","selectedVehicle","setSelectedVehicle","mapCenter","setMapCenter","mapZoom","setMapZoom","isConnected","setIsConnected","simulationRunning","setSimulationRunning","cityName","setCityName","availableCities","setAvailableCities","activeTab","setActiveTab","toast","setToast","message","type","visible","simulationSpeed","setSimulationSpeed","trafficLightMode","setTrafficLightMode","routingAlgorithm","setRoutingAlgorithm","showCongestion","setShowCongestion","showVehicles","setShowVehicles","showTrafficLights","setShowTrafficLights","showIncidents","setShowIncidents","analyticsData","setAnalyticsData","averageSpeed","averageWaitTime","congestionTrend","trafficLightEfficiency","vehicleCountHistory","incidentHistory","manualLightControl","setManualLightControl","nodeId","state","showToast","setTimeout","prev","socket","transports","path","on","console","log","data","nodes","length","lat","lon","running","status","disconnect","startSimulation","fetch","method","headers","body","JSON","stringify","city","speed","routing_algorithm","traffic_light_mode","then","response","json","catch","error","stopSimulation","addIncident","charAt","toUpperCase","slice","changeCity","updateSimulationSettings","settings","undefined","controlTrafficLight","node_id","addVehicle","origin","destination","getVehicleIcon","vehicle","getTrafficLightIcon","light","getCongestionColor","level","className","children","fileName","lineNumber","columnNumber","style","height","width","attribution","url","edges","edge","index","congestion","id","color","weight","positions","source_lat","source_lon","target_lat","target_lon","opacity","sticky","name","toFixed","vehicle_count","Math","round","travel_time","position","icon","nextChange","next_change","queueLength","queue_length","zIndexOffset","currentRoute","current_route","eta","find","v","point","dashArray","incident","radius","fillColor","fillOpacity","Date","timestamp","toLocaleTimeString","expected_clearance","severity","_c2","$RefreshReg$"],"sources":["E:/algoupdated project/frontend/src/App.tsx"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useState, useCallback } from \"react\"\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, Circle, useMap, LayerGroup, Tooltip } from \"react-leaflet\"\nimport \"leaflet/dist/leaflet.css\"\nimport \"./App.css\"\nimport { io } from \"socket.io-client\"\nimport L from \"leaflet\"\nimport { TrafficLight } from \"./components/TrafficLight\"\nimport { VehicleRouting } from \"./components/VehicleRouting\"\nimport { TrafficDashboard } from \"./components/TrafficDashboard\"\nimport { Sidebar } from \"./components/Sidebar\"\nimport { ControlPanel } from \"./components/ControlPanel\"\nimport { Analytics } from \"./components/Analytics\"\nimport { Toast } from \"./components/Toast\"\n\n// Fix Leaflet icon issue\nL.Icon.Default.imagePath = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/\"\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: `${L.Icon.Default.imagePath}/marker-icon-2x.png`,\n  iconUrl: `${L.Icon.Default.imagePath}/marker-icon.png`,\n  shadowUrl: `${L.Icon.Default.imagePath}/marker-shadow.png`,\n})\n\n// Custom icons for traffic lights\nconst greenLightIcon = new L.Icon({\n  iconUrl: \"/green-light.svg\",\n  iconSize: [25, 25],\n})\n\nconst redLightIcon = new L.Icon({\n  iconUrl: \"/red-light.svg\",\n  iconSize: [25, 25],\n})\n\nconst yellowLightIcon = new L.Icon({\n  iconUrl: \"/yellow-light.svg\",\n  iconSize: [25, 25],\n})\n\n// Custom vehicle icon\nconst vehicleIcon = new L.Icon({\n  iconUrl: \"/vehicle.svg\",\n  iconSize: [20, 20],\n})\n\n// Custom vehicle icons based on type\nconst carIcon = new L.Icon({\n  iconUrl: \"/car.svg\",\n  iconSize: [24, 24],\n})\n\nconst busIcon = new L.Icon({\n  iconUrl: \"/bus.svg\",\n  iconSize: [28, 28],\n})\n\nconst truckIcon = new L.Icon({\n  iconUrl: \"/truck.svg\",\n  iconSize: [30, 30],\n})\n\n// MapUpdater component to handle map updates\nfunction MapUpdater({ center, zoom }: { center: [number, number]; zoom: number }) {\n  const map = useMap()\n\n  useEffect(() => {\n    map.setView(center, zoom)\n  }, [center, zoom, map])\n\n  return null\n}\n\nfunction App() {\n  const [cityGraph, setCityGraph] = useState<any>(null)\n  const [trafficLights, setTrafficLights] = useState<any[]>([])\n  const [vehicles, setVehicles] = useState<any[]>([])\n  const [incidents, setIncidents] = useState<any[]>([])\n  const [congestionLevels, setCongestionLevels] = useState<any>({})\n  const [selectedVehicle, setSelectedVehicle] = useState<string | null>(null)\n  const [mapCenter, setMapCenter] = useState<[number, number]>([37.7749, -122.4194]) // Default: San Francisco\n  const [mapZoom, setMapZoom] = useState(13)\n  const [isConnected, setIsConnected] = useState(false)\n  const [simulationRunning, setSimulationRunning] = useState(false)\n  const [cityName, setCityName] = useState(\"San Francisco\")\n  const [availableCities, setAvailableCities] = useState<string[]>([\n    \"San Francisco\",\n    \"New York\",\n    \"Chicago\",\n    \"Boston\",\n    \"Seattle\",\n  ])\n  const [activeTab, setActiveTab] = useState(\"map\")\n  const [toast, setToast] = useState<{ message: string; type: string; visible: boolean }>({\n    message: \"\",\n    type: \"\",\n    visible: false,\n  })\n  const [simulationSpeed, setSimulationSpeed] = useState(1)\n  const [trafficLightMode, setTrafficLightMode] = useState(\"auto\")\n  const [routingAlgorithm, setRoutingAlgorithm] = useState(\"a_star\")\n  const [showCongestion, setShowCongestion] = useState(true)\n  const [showVehicles, setShowVehicles] = useState(true)\n  const [showTrafficLights, setShowTrafficLights] = useState(true)\n  const [showIncidents, setShowIncidents] = useState(true)\n  const [analyticsData, setAnalyticsData] = useState<any>({\n    averageSpeed: 0,\n    averageWaitTime: 0,\n    congestionTrend: [],\n    trafficLightEfficiency: 0,\n    vehicleCountHistory: [],\n    incidentHistory: [],\n  })\n  const [manualLightControl, setManualLightControl] = useState<any>({\n    nodeId: null,\n    state: \"red\",\n  })\n\n  // Show toast message\n  const showToast = useCallback((message: string, type = \"info\") => {\n    setToast({ message, type, visible: true })\n    setTimeout(() => {\n      setToast((prev) => ({ ...prev, visible: false }))\n    }, 3000)\n  }, [])\n\n  useEffect(() => {\n    // Connect to WebSocket server\n    const socket = io(\"http://localhost:8000\", {\n      transports: [\"websocket\"],\n      path: \"/ws/socket.io\",\n    })\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to WebSocket server\")\n      setIsConnected(true)\n      showToast(\"Connected to server\", \"success\")\n    })\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from WebSocket server\")\n      setIsConnected(false)\n      showToast(\"Disconnected from server\", \"error\")\n    })\n\n    socket.on(\"city_graph\", (data) => {\n      console.log(\"Received city graph:\", data)\n      setCityGraph(data)\n\n      // Set map center to the first node in the graph\n      if (data.nodes && data.nodes.length > 0) {\n        setMapCenter([data.nodes[0].lat, data.nodes[0].lon])\n      }\n    })\n\n    socket.on(\"traffic_lights\", (data) => {\n      console.log(\"Received traffic lights:\", data)\n      setTrafficLights(data)\n    })\n\n    socket.on(\"vehicles\", (data) => {\n      console.log(\"Received vehicles:\", data)\n      setVehicles(data)\n    })\n\n    socket.on(\"incidents\", (data) => {\n      console.log(\"Received incidents:\", data)\n      setIncidents(data)\n    })\n\n    socket.on(\"congestion\", (data) => {\n      console.log(\"Received congestion levels:\", data)\n      setCongestionLevels(data)\n    })\n\n    socket.on(\"analytics\", (data) => {\n      console.log(\"Received analytics data:\", data)\n      setAnalyticsData(data)\n    })\n\n    socket.on(\"simulation_status\", (data) => {\n      console.log(\"Simulation status:\", data)\n      setSimulationRunning(data.running)\n      if (data.message) {\n        showToast(data.message, data.status)\n      }\n    })\n\n    // Clean up on component unmount\n    return () => {\n      socket.disconnect()\n    }\n  }, [showToast])\n\n  const startSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/start\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        city: cityName,\n        speed: simulationSpeed,\n        routing_algorithm: routingAlgorithm,\n        traffic_light_mode: trafficLightMode,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Simulation started:\", data)\n        if (data.status === \"success\") {\n          setSimulationRunning(true)\n          showToast(data.message, \"success\")\n        } else {\n          showToast(data.message, \"error\")\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error starting simulation:\", error)\n        showToast(\"Error starting simulation\", \"error\")\n      })\n  }\n\n  const stopSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/stop\", {\n      method: \"POST\",\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Simulation stopped:\", data)\n        if (data.status === \"success\") {\n          setSimulationRunning(false)\n          showToast(data.message, \"success\")\n        } else {\n          showToast(data.message, \"error\")\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error stopping simulation:\", error)\n        showToast(\"Error stopping simulation\", \"error\")\n      })\n  }\n\n  const addIncident = (lat: number, lon: number, type: string) => {\n    fetch(\"http://localhost:8000/incidents/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ lat, lon, type }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Incident added:\", data)\n        if (data.status === \"success\") {\n          showToast(`${type.charAt(0).toUpperCase() + type.slice(1)} incident reported`, \"success\")\n        } else {\n          showToast(data.message, \"error\")\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error adding incident:\", error)\n        showToast(\"Error reporting incident\", \"error\")\n      })\n  }\n\n  const changeCity = (city: string) => {\n    setCityName(city)\n    // Reset simulation if running\n    if (simulationRunning) {\n      stopSimulation()\n    }\n    showToast(`City changed to ${city}`, \"info\")\n  }\n\n  const updateSimulationSettings = (settings: any) => {\n    fetch(\"http://localhost:8000/simulation/settings\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(settings),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Settings updated:\", data)\n        if (data.status === \"success\") {\n          showToast(\"Simulation settings updated\", \"success\")\n\n          // Update local state\n          if (settings.speed !== undefined) setSimulationSpeed(settings.speed)\n          if (settings.routing_algorithm !== undefined) setRoutingAlgorithm(settings.routing_algorithm)\n          if (settings.traffic_light_mode !== undefined) setTrafficLightMode(settings.traffic_light_mode)\n        } else {\n          showToast(data.message, \"error\")\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error updating settings:\", error)\n        showToast(\"Error updating settings\", \"error\")\n      })\n  }\n\n  const controlTrafficLight = (nodeId: string, state: string) => {\n    fetch(\"http://localhost:8000/traffic_lights/control\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ node_id: nodeId, state }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Traffic light controlled:\", data)\n        if (data.status === \"success\") {\n          showToast(`Traffic light ${nodeId} set to ${state}`, \"success\")\n          setManualLightControl({ nodeId, state })\n        } else {\n          showToast(data.message, \"error\")\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error controlling traffic light:\", error)\n        showToast(\"Error controlling traffic light\", \"error\")\n      })\n  }\n\n  const addVehicle = (origin: string, destination: string, type = \"car\") => {\n    fetch(\"http://localhost:8000/vehicles/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ origin, destination, type }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Vehicle added:\", data)\n        if (data.status === \"success\") {\n          showToast(`New ${type} added to simulation`, \"success\")\n        } else {\n          showToast(data.message, \"error\")\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error adding vehicle:\", error)\n        showToast(\"Error adding vehicle\", \"error\")\n      })\n  }\n\n  const getVehicleIcon = (vehicle: any) => {\n    switch (vehicle.type) {\n      case \"bus\":\n        return busIcon\n      case \"truck\":\n        return truckIcon\n      default:\n        return carIcon\n    }\n  }\n\n  const getTrafficLightIcon = (light: any) => {\n    switch (light.state) {\n      case \"green\":\n        return greenLightIcon\n      case \"yellow\":\n        return yellowLightIcon\n      default:\n        return redLightIcon\n    }\n  }\n\n  const getCongestionColor = (level: number) => {\n    if (level < 0.3) return \"#4ade80\" // green\n    if (level < 0.6) return \"#fb923c\" // orange\n    return \"#ef4444\" // red\n  }\n\n  return (\n    <div className=\"app-container\">\n      <Sidebar\n        isConnected={isConnected}\n        simulationRunning={simulationRunning}\n        startSimulation={startSimulation}\n        stopSimulation={stopSimulation}\n        cityName={cityName}\n        availableCities={availableCities}\n        changeCity={changeCity}\n        vehicles={vehicles}\n        selectedVehicle={selectedVehicle}\n        setSelectedVehicle={setSelectedVehicle}\n        addIncident={addIncident}\n        activeTab={activeTab}\n        setActiveTab={setActiveTab}\n        simulationSpeed={simulationSpeed}\n        trafficLightMode={trafficLightMode}\n        routingAlgorithm={routingAlgorithm}\n        updateSimulationSettings={updateSimulationSettings}\n        addVehicle={addVehicle}\n        showCongestion={showCongestion}\n        setShowCongestion={setShowCongestion}\n        showVehicles={showVehicles}\n        setShowVehicles={setShowVehicles}\n        showTrafficLights={showTrafficLights}\n        setShowTrafficLights={setShowTrafficLights}\n        showIncidents={showIncidents}\n        setShowIncidents={setShowIncidents}\n      />\n\n      <div className=\"main-content\">\n        {activeTab === \"map\" && (\n          <>\n            <TrafficDashboard\n              trafficLights={trafficLights}\n              vehicles={vehicles}\n              incidents={incidents}\n              congestionLevels={congestionLevels}\n              analyticsData={analyticsData}\n            />\n\n            <div className=\"map-container\">\n              <MapContainer center={mapCenter} zoom={mapZoom} style={{ height: \"100%\", width: \"100%\" }}>\n                <MapUpdater center={mapCenter} zoom={mapZoom} />\n                <TileLayer\n                  attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n\n                {/* Render city graph */}\n                {cityGraph && cityGraph.edges && showCongestion && (\n                  <LayerGroup>\n                    {cityGraph.edges.map((edge: any, index: number) => {\n                      const congestion = congestionLevels[edge.id] || 0\n                      const color = getCongestionColor(congestion)\n                      const weight = 3 + congestion * 5 // Thicker lines for more congestion\n\n                      return (\n                        <Polyline\n                          key={`edge-${index}`}\n                          positions={[\n                            [edge.source_lat, edge.source_lon],\n                            [edge.target_lat, edge.target_lon],\n                          ]}\n                          color={color}\n                          weight={weight}\n                          opacity={0.8}\n                        >\n                          <Tooltip sticky>\n                            <div>\n                              <strong>{edge.name || `Road ${edge.id}`}</strong>\n                              <div>Congestion: {(congestion * 100).toFixed(0)}%</div>\n                              <div>Vehicles: {edge.vehicle_count || 0}</div>\n                              <div>Travel time: {Math.round(edge.travel_time)} sec</div>\n                            </div>\n                          </Tooltip>\n                        </Polyline>\n                      )\n                    })}\n                  </LayerGroup>\n                )}\n\n                {/* Render traffic lights */}\n                {showTrafficLights && (\n                  <LayerGroup>\n                    {trafficLights.map((light, index) => (\n                      <Marker\n                        key={`light-${index}`}\n                        position={[light.lat, light.lon]}\n                        icon={getTrafficLightIcon(light)}\n                      >\n                        <Popup>\n                          <TrafficLight\n                            id={light.id}\n                            state={light.state}\n                            nextChange={light.next_change}\n                            queueLength={light.queue_length}\n                            controlTrafficLight={controlTrafficLight}\n                            trafficLightMode={trafficLightMode}\n                          />\n                        </Popup>\n                      </Marker>\n                    ))}\n                  </LayerGroup>\n                )}\n\n                {/* Render vehicles */}\n                {showVehicles && (\n                  <LayerGroup>\n                    {vehicles.map((vehicle, index) => (\n                      <Marker\n                        key={`vehicle-${index}`}\n                        position={[vehicle.lat, vehicle.lon]}\n                        icon={getVehicleIcon(vehicle)}\n                        zIndexOffset={selectedVehicle === vehicle.id ? 1000 : 0}\n                      >\n                        <Popup>\n                          <VehicleRouting\n                            id={vehicle.id}\n                            type={vehicle.type || \"car\"}\n                            origin={vehicle.origin}\n                            destination={vehicle.destination}\n                            currentRoute={vehicle.current_route}\n                            eta={vehicle.eta}\n                            speed={vehicle.speed}\n                            status={vehicle.status}\n                          />\n                        </Popup>\n                      </Marker>\n                    ))}\n                  </LayerGroup>\n                )}\n\n                {/* Render selected vehicle route */}\n                {selectedVehicle && vehicles.find((v) => v.id === selectedVehicle)?.current_route && (\n                  <Polyline\n                    positions={vehicles\n                      .find((v) => v.id === selectedVehicle)\n                      ?.current_route.map((point: any) => [point.lat, point.lon])}\n                    color=\"#3b82f6\"\n                    weight={5}\n                    dashArray=\"10, 10\"\n                  />\n                )}\n\n                {/* Render incidents */}\n                {showIncidents && (\n                  <LayerGroup>\n                    {incidents.map((incident, index) => (\n                      <Circle\n                        key={`incident-${index}`}\n                        center={[incident.lat, incident.lon]}\n                        radius={100}\n                        color={\n                          incident.type === \"accident\"\n                            ? \"#ef4444\"\n                            : incident.type === \"construction\"\n                              ? \"#f59e0b\"\n                              : \"#fb923c\"\n                        }\n                        fillColor={\n                          incident.type === \"accident\"\n                            ? \"#ef4444\"\n                            : incident.type === \"construction\"\n                              ? \"#f59e0b\"\n                              : \"#fb923c\"\n                        }\n                        fillOpacity={0.5}\n                      >\n                        <Popup>\n                          <div className=\"incident-popup\">\n                            <h3>{incident.type.charAt(0).toUpperCase() + incident.type.slice(1)}</h3>\n                            <p>Reported at: {new Date(incident.timestamp * 1000).toLocaleTimeString()}</p>\n                            <p>\n                              Expected clearance: {new Date(incident.expected_clearance * 1000).toLocaleTimeString()}\n                            </p>\n                            <div className=\"incident-severity\">\n                              Severity:{\" \"}\n                              <span className={`severity-${incident.severity || \"medium\"}`}>\n                                {incident.severity || \"Medium\"}\n                              </span>\n                            </div>\n                          </div>\n                        </Popup>\n                      </Circle>\n                    ))}\n                  </LayerGroup>\n                )}\n              </MapContainer>\n            </div>\n          </>\n        )}\n\n        {activeTab === \"control\" && (\n          <ControlPanel\n            trafficLights={trafficLights}\n            vehicles={vehicles}\n            controlTrafficLight={controlTrafficLight}\n            addVehicle={addVehicle}\n            cityGraph={cityGraph}\n            trafficLightMode={trafficLightMode}\n            manualLightControl={manualLightControl}\n          />\n        )}\n\n        {activeTab === \"analytics\" && (\n          <Analytics\n            analyticsData={analyticsData}\n            vehicles={vehicles}\n            trafficLights={trafficLights}\n            incidents={incidents}\n            congestionLevels={congestionLevels}\n          />\n        )}\n      </div>\n\n      <Toast message={toast.message} type={toast.type} visible={toast.visible} />\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}