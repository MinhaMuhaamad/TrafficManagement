{"ast":null,"code":"var _jsxFileName = \"E:\\\\algoupdated project\\\\frontend\\\\src\\\\components\\\\TrafficLight.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TrafficLight = ({\n  id,\n  state,\n  nextChange,\n  queueLength\n}) => {\n  // Calculate time until next change\n  const timeUntilChange = Math.max(0, Math.floor((nextChange - Date.now()) / 1000));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"traffic-light-popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Traffic Light \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"light-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `light-indicator ${state}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Current state: \", state.toUpperCase()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Changes in: \", timeUntilChange, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Queue length: \", queueLength, \" vehicles\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = TrafficLight;\nvar _c;\n$RefreshReg$(_c, \"TrafficLight\");","map":{"version":3,"names":["TrafficLight","id","state","nextChange","queueLength","timeUntilChange","Math","max","floor","Date","now","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","_c","$RefreshReg$"],"sources":["E:/algoupdated project/frontend/src/components/TrafficLight.tsx"],"sourcesContent":["import type React from \"react\"\n\ninterface TrafficLightProps {\n  id: string\n  state: \"green\" | \"red\" | \"yellow\"\n  nextChange: number\n  queueLength: number\n}\n\nexport const TrafficLight: React.FC<TrafficLightProps> = ({ id, state, nextChange, queueLength }) => {\n  // Calculate time until next change\n  const timeUntilChange = Math.max(0, Math.floor((nextChange - Date.now()) / 1000))\n\n  return (\n    <div className=\"traffic-light-popup\">\n      <h3>Traffic Light {id}</h3>\n      <div className=\"light-status\">\n        <div className={`light-indicator ${state}`} />\n        <span>Current state: {state.toUpperCase()}</span>\n      </div>\n      <p>Changes in: {timeUntilChange} seconds</p>\n      <p>Queue length: {queueLength} vehicles</p>\n    </div>\n  )\n}\n"],"mappings":";;AASA,OAAO,MAAMA,YAAyC,GAAGA,CAAC;EAAEC,EAAE;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAY,CAAC,KAAK;EACnG;EACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAAC,CAACL,UAAU,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;EAEjF,oBACEC,OAAA;IAAKC,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCF,OAAA;MAAAE,QAAA,GAAI,gBAAc,EAACZ,EAAE;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC3BN,OAAA;MAAKC,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BF,OAAA;QAAKC,SAAS,EAAE,mBAAmBV,KAAK;MAAG;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9CN,OAAA;QAAAE,QAAA,GAAM,iBAAe,EAACX,KAAK,CAACgB,WAAW,CAAC,CAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACNN,OAAA;MAAAE,QAAA,GAAG,cAAY,EAACR,eAAe,EAAC,UAAQ;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC5CN,OAAA;MAAAE,QAAA,GAAG,gBAAc,EAACT,WAAW,EAAC,WAAS;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAAAE,EAAA,GAfYnB,YAAyC;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}