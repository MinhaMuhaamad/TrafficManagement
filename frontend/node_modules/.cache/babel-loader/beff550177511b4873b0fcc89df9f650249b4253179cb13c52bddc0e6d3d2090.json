{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"E:\\\\algoupdated project\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, Circle, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport L from \"leaflet\";\nimport { TrafficLight } from \"./components/TrafficLight\";\nimport { VehicleRouting } from \"./components/VehicleRouting\";\nimport { TrafficDashboard } from \"./components/TrafficDashboard\";\nimport { Sidebar } from \"./components/Sidebar\"\n\n// Fix Leaflet icon issue - using type assertion to avoid TypeScript error\n;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nL.Icon.Default.prototype._getIconUrl = function () {};\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\"\n});\n\n// Custom icons for traffic lights\nconst greenLightIcon = new L.Icon({\n  iconUrl: \"/green-light.svg\",\n  iconSize: [25, 25]\n});\nconst redLightIcon = new L.Icon({\n  iconUrl: \"/red-light.svg\",\n  iconSize: [25, 25]\n});\nconst vehicleIcon = new L.Icon({\n  iconUrl: \"/vehicle.svg\",\n  iconSize: [20, 20]\n});\n\n// MapUpdater component to handle map updates\nfunction MapUpdater({\n  center,\n  zoom\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    map.setView(center, zoom);\n  }, [center, zoom, map]);\n  return null;\n}\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nfunction App() {\n  _s2();\n  var _vehicles$find, _vehicles$find2;\n  const [cityGraph, setCityGraph] = useState(null);\n  const [trafficLights, setTrafficLights] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  const [incidents, setIncidents] = useState([]);\n  const [congestionLevels, setCongestionLevels] = useState({});\n  const [selectedVehicle, setSelectedVehicle] = useState(null);\n  const [mapCenter, setMapCenter] = useState([37.7749, -122.4194]); // Default: San Francisco\n  const [mapZoom, setMapZoom] = useState(13);\n  const [isConnected, setIsConnected] = useState(false);\n  const [simulationRunning, setSimulationRunning] = useState(false);\n  const [cityName, setCityName] = useState(\"San Francisco\");\n  const [availableCities, setAvailableCities] = useState([\"San Francisco\", \"New York\", \"Chicago\", \"Boston\", \"Seattle\"]);\n  useEffect(() => {\n    // Connect to WebSocket server\n    const socket = io(\"http://localhost:8000\", {\n      transports: [\"websocket\", \"polling\"],\n      path: \"/ws/socket.io\",\n      withCredentials: false,\n      // Changed this to false\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true,\n      forceNew: true\n    });\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to WebSocket server\");\n      setIsConnected(true);\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setIsConnected(false);\n    });\n    socket.on(\"city_graph\", data => {\n      console.log(\"Received city graph:\", data);\n      setCityGraph(data);\n\n      // Set map center to the first node in the graph\n      if (data.nodes && data.nodes.length > 0) {\n        setMapCenter([data.nodes[0].lat, data.nodes[0].lon]);\n      }\n    });\n    socket.on(\"traffic_lights\", data => {\n      console.log(\"Received traffic lights:\", data);\n      setTrafficLights(data);\n    });\n    socket.on(\"vehicles\", data => {\n      console.log(\"Received vehicles:\", data);\n      setVehicles(data);\n    });\n    socket.on(\"incidents\", data => {\n      console.log(\"Received incidents:\", data);\n      setIncidents(data);\n    });\n    socket.on(\"congestion\", data => {\n      console.log(\"Received congestion levels:\", data);\n      setCongestionLevels(data);\n    });\n\n    // Clean up on component unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const startSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/start\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        city: cityName\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Simulation started:\", data);\n      setSimulationRunning(true);\n    }).catch(error => console.error(\"Error starting simulation:\", error));\n  };\n  const stopSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/stop\", {\n      method: \"POST\"\n    }).then(response => response.json()).then(data => {\n      console.log(\"Simulation stopped:\", data);\n      setSimulationRunning(false);\n    }).catch(error => console.error(\"Error stopping simulation:\", error));\n  };\n  const addIncident = (lat, lon, type) => {\n    fetch(\"http://localhost:8000/incidents/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        lat,\n        lon,\n        type\n      })\n    }).then(response => response.json()).then(data => console.log(\"Incident added:\", data)).catch(error => console.error(\"Error adding incident:\", error));\n  };\n  const changeCity = city => {\n    setCityName(city);\n    // Reset simulation if running\n    if (simulationRunning) {\n      stopSimulation();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isConnected: isConnected,\n      simulationRunning: simulationRunning,\n      startSimulation: startSimulation,\n      stopSimulation: stopSimulation,\n      cityName: cityName,\n      availableCities: availableCities,\n      changeCity: changeCity,\n      vehicles: vehicles,\n      selectedVehicle: selectedVehicle,\n      setSelectedVehicle: setSelectedVehicle,\n      addIncident: addIncident\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(TrafficDashboard, {\n        trafficLights: trafficLights,\n        vehicles: vehicles,\n        incidents: incidents,\n        congestionLevels: congestionLevels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: mapZoom,\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(MapUpdater, {\n            center: mapCenter,\n            zoom: mapZoom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), cityGraph && cityGraph.edges && cityGraph.edges.map((edge, index) => {\n            const congestion = congestionLevels[edge.id] || 0;\n            // Color based on congestion level (green to red)\n            const color = congestion < 0.3 ? \"green\" : congestion < 0.6 ? \"orange\" : \"red\";\n            const weight = 3 + congestion * 5; // Thicker lines for more congestion\n\n            return /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: [[edge.source_lat, edge.source_lon], [edge.target_lat, edge.target_lon]],\n              color: color,\n              weight: weight\n            }, `edge-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 19\n            }, this);\n          }), trafficLights.map((light, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: [light.lat, light.lon],\n            icon: light.state === \"green\" ? greenLightIcon : redLightIcon,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(TrafficLight, {\n                id: light.id,\n                state: light.state,\n                nextChange: light.next_change,\n                queueLength: light.queue_length\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)\n          }, `light-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)), vehicles.map((vehicle, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: [vehicle.lat, vehicle.lon],\n            icon: vehicleIcon,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(VehicleRouting, {\n                id: vehicle.id,\n                origin: vehicle.origin,\n                destination: vehicle.destination,\n                currentRoute: vehicle.current_route,\n                eta: vehicle.eta\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this)\n          }, `vehicle-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this)), selectedVehicle && ((_vehicles$find = vehicles.find(v => v.id === selectedVehicle)) === null || _vehicles$find === void 0 ? void 0 : _vehicles$find.current_route) && /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: (_vehicles$find2 = vehicles.find(v => v.id === selectedVehicle)) === null || _vehicles$find2 === void 0 ? void 0 : _vehicles$find2.current_route.map(point => [point.lat, point.lon]),\n            color: \"blue\",\n            weight: 5,\n            dashArray: \"10, 10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), incidents.map((incident, index) => /*#__PURE__*/_jsxDEV(Circle, {\n            center: [incident.lat, incident.lon],\n            radius: 100,\n            color: incident.type === \"accident\" ? \"red\" : \"orange\",\n            fillColor: incident.type === \"accident\" ? \"red\" : \"orange\",\n            fillOpacity: 0.5,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: incident.type.charAt(0).toUpperCase() + incident.type.slice(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Reported at: \", new Date(incident.timestamp).toLocaleTimeString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Expected clearance: \", new Date(incident.expected_clearance).toLocaleTimeString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this)\n          }, `incident-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"ZI5LSls/K7BnHp7/zPKjz/O6KT4=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","useEffect","useState","MapContainer","TileLayer","Marker","Popup","Polyline","Circle","useMap","io","L","TrafficLight","VehicleRouting","TrafficDashboard","Sidebar","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","greenLightIcon","iconSize","redLightIcon","vehicleIcon","MapUpdater","center","zoom","map","setView","_c","App","_vehicles$find","_vehicles$find2","cityGraph","setCityGraph","trafficLights","setTrafficLights","vehicles","setVehicles","incidents","setIncidents","congestionLevels","setCongestionLevels","selectedVehicle","setSelectedVehicle","mapCenter","setMapCenter","mapZoom","setMapZoom","isConnected","setIsConnected","simulationRunning","setSimulationRunning","cityName","setCityName","availableCities","setAvailableCities","socket","transports","path","withCredentials","reconnectionAttempts","reconnectionDelay","autoConnect","forceNew","on","console","log","data","nodes","length","lat","lon","disconnect","startSimulation","fetch","method","headers","body","JSON","stringify","city","then","response","json","catch","error","stopSimulation","addIncident","type","changeCity","className","children","fileName","lineNumber","columnNumber","style","height","width","attribution","url","edges","edge","index","congestion","id","color","weight","positions","source_lat","source_lon","target_lat","target_lon","light","position","icon","state","nextChange","next_change","queueLength","queue_length","vehicle","origin","destination","currentRoute","current_route","eta","find","v","point","dashArray","incident","radius","fillColor","fillOpacity","charAt","toUpperCase","slice","Date","timestamp","toLocaleTimeString","expected_clearance","_c2","$RefreshReg$"],"sources":["E:/algoupdated project/frontend/src/App.tsx"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, Circle, useMap } from \"react-leaflet\"\nimport \"leaflet/dist/leaflet.css\"\nimport \"./App.css\"\nimport { io } from \"socket.io-client\"\nimport L from \"leaflet\"\nimport { TrafficLight } from \"./components/TrafficLight\"\nimport { VehicleRouting } from \"./components/VehicleRouting\"\nimport { TrafficDashboard } from \"./components/TrafficDashboard\"\nimport { Sidebar } from \"./components/Sidebar\"\n\n// Fix Leaflet icon issue - using type assertion to avoid TypeScript error\n;(L.Icon.Default.prototype as any)._getIconUrl = function () {}\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n})\n\n// Custom icons for traffic lights\nconst greenLightIcon = new L.Icon({\n  iconUrl: \"/green-light.svg\",\n  iconSize: [25, 25],\n})\n\nconst redLightIcon = new L.Icon({\n  iconUrl: \"/red-light.svg\",\n  iconSize: [25, 25],\n})\n\nconst vehicleIcon = new L.Icon({\n  iconUrl: \"/vehicle.svg\",\n  iconSize: [20, 20],\n})\n\n// MapUpdater component to handle map updates\nfunction MapUpdater({ center, zoom }: { center: [number, number]; zoom: number }) {\n  const map = useMap()\n\n  useEffect(() => {\n    map.setView(center, zoom)\n  }, [center, zoom, map])\n\n  return null\n}\n\nfunction App() {\n  const [cityGraph, setCityGraph] = useState<any>(null)\n  const [trafficLights, setTrafficLights] = useState<any[]>([])\n  const [vehicles, setVehicles] = useState<any[]>([])\n  const [incidents, setIncidents] = useState<any[]>([])\n  const [congestionLevels, setCongestionLevels] = useState<any>({})\n  const [selectedVehicle, setSelectedVehicle] = useState<string | null>(null)\n  const [mapCenter, setMapCenter] = useState<[number, number]>([37.7749, -122.4194]) // Default: San Francisco\n  const [mapZoom, setMapZoom] = useState(13)\n  const [isConnected, setIsConnected] = useState(false)\n  const [simulationRunning, setSimulationRunning] = useState(false)\n  const [cityName, setCityName] = useState(\"San Francisco\")\n  const [availableCities, setAvailableCities] = useState<string[]>([\n    \"San Francisco\",\n    \"New York\",\n    \"Chicago\",\n    \"Boston\",\n    \"Seattle\",\n  ])\n\n  useEffect(() => {\n    // Connect to WebSocket server\n    const socket = io(\"http://localhost:8000\", {\n      transports: [\"websocket\", \"polling\"],\n      path: \"/ws/socket.io\",\n      withCredentials: false, // Changed this to false\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true,\n      forceNew: true,\n    })\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to WebSocket server\")\n      setIsConnected(true)\n    })\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from WebSocket server\")\n      setIsConnected(false)\n    })\n\n    socket.on(\"city_graph\", (data) => {\n      console.log(\"Received city graph:\", data)\n      setCityGraph(data)\n\n      // Set map center to the first node in the graph\n      if (data.nodes && data.nodes.length > 0) {\n        setMapCenter([data.nodes[0].lat, data.nodes[0].lon])\n      }\n    })\n\n    socket.on(\"traffic_lights\", (data) => {\n      console.log(\"Received traffic lights:\", data)\n      setTrafficLights(data)\n    })\n\n    socket.on(\"vehicles\", (data) => {\n      console.log(\"Received vehicles:\", data)\n      setVehicles(data)\n    })\n\n    socket.on(\"incidents\", (data) => {\n      console.log(\"Received incidents:\", data)\n      setIncidents(data)\n    })\n\n    socket.on(\"congestion\", (data) => {\n      console.log(\"Received congestion levels:\", data)\n      setCongestionLevels(data)\n    })\n\n    // Clean up on component unmount\n    return () => {\n      socket.disconnect()\n    }\n  }, [])\n\n  const startSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/start\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ city: cityName }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Simulation started:\", data)\n        setSimulationRunning(true)\n      })\n      .catch((error) => console.error(\"Error starting simulation:\", error))\n  }\n\n  const stopSimulation = () => {\n    fetch(\"http://localhost:8000/simulation/stop\", {\n      method: \"POST\",\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Simulation stopped:\", data)\n        setSimulationRunning(false)\n      })\n      .catch((error) => console.error(\"Error stopping simulation:\", error))\n  }\n\n  const addIncident = (lat: number, lon: number, type: string) => {\n    fetch(\"http://localhost:8000/incidents/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ lat, lon, type }),\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(\"Incident added:\", data))\n      .catch((error) => console.error(\"Error adding incident:\", error))\n  }\n\n  const changeCity = (city: string) => {\n    setCityName(city)\n    // Reset simulation if running\n    if (simulationRunning) {\n      stopSimulation()\n    }\n  }\n\n  return (\n    <div className=\"app-container\">\n      <Sidebar\n        isConnected={isConnected}\n        simulationRunning={simulationRunning}\n        startSimulation={startSimulation}\n        stopSimulation={stopSimulation}\n        cityName={cityName}\n        availableCities={availableCities}\n        changeCity={changeCity}\n        vehicles={vehicles}\n        selectedVehicle={selectedVehicle}\n        setSelectedVehicle={setSelectedVehicle}\n        addIncident={addIncident}\n      />\n\n      <div className=\"main-content\">\n        <TrafficDashboard\n          trafficLights={trafficLights}\n          vehicles={vehicles}\n          incidents={incidents}\n          congestionLevels={congestionLevels}\n        />\n\n        <div className=\"map-container\">\n          <MapContainer center={mapCenter} zoom={mapZoom} style={{ height: \"100%\", width: \"100%\" }}>\n            <MapUpdater center={mapCenter} zoom={mapZoom} />\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n\n            {/* Render city graph */}\n            {cityGraph &&\n              cityGraph.edges &&\n              cityGraph.edges.map((edge: any, index: number) => {\n                const congestion = congestionLevels[edge.id] || 0\n                // Color based on congestion level (green to red)\n                const color = congestion < 0.3 ? \"green\" : congestion < 0.6 ? \"orange\" : \"red\"\n                const weight = 3 + congestion * 5 // Thicker lines for more congestion\n\n                return (\n                  <Polyline\n                    key={`edge-${index}`}\n                    positions={[\n                      [edge.source_lat, edge.source_lon],\n                      [edge.target_lat, edge.target_lon],\n                    ]}\n                    color={color}\n                    weight={weight}\n                  />\n                )\n              })}\n\n            {/* Render traffic lights */}\n            {trafficLights.map((light, index) => (\n              <Marker\n                key={`light-${index}`}\n                position={[light.lat, light.lon]}\n                icon={light.state === \"green\" ? greenLightIcon : redLightIcon}\n              >\n                <Popup>\n                  <TrafficLight\n                    id={light.id}\n                    state={light.state}\n                    nextChange={light.next_change}\n                    queueLength={light.queue_length}\n                  />\n                </Popup>\n              </Marker>\n            ))}\n\n            {/* Render vehicles */}\n            {vehicles.map((vehicle, index) => (\n              <Marker key={`vehicle-${index}`} position={[vehicle.lat, vehicle.lon]} icon={vehicleIcon}>\n                <Popup>\n                  <VehicleRouting\n                    id={vehicle.id}\n                    origin={vehicle.origin}\n                    destination={vehicle.destination}\n                    currentRoute={vehicle.current_route}\n                    eta={vehicle.eta}\n                  />\n                </Popup>\n              </Marker>\n            ))}\n\n            {/* Render selected vehicle route */}\n            {selectedVehicle && vehicles.find((v) => v.id === selectedVehicle)?.current_route && (\n              <Polyline\n                positions={vehicles\n                  .find((v) => v.id === selectedVehicle)\n                  ?.current_route.map((point: any) => [point.lat, point.lon])}\n                color=\"blue\"\n                weight={5}\n                dashArray=\"10, 10\"\n              />\n            )}\n\n            {/* Render incidents */}\n            {incidents.map((incident, index) => (\n              <Circle\n                key={`incident-${index}`}\n                center={[incident.lat, incident.lon]}\n                radius={100}\n                color={incident.type === \"accident\" ? \"red\" : \"orange\"}\n                fillColor={incident.type === \"accident\" ? \"red\" : \"orange\"}\n                fillOpacity={0.5}\n              >\n                <Popup>\n                  <div>\n                    <h3>{incident.type.charAt(0).toUpperCase() + incident.type.slice(1)}</h3>\n                    <p>Reported at: {new Date(incident.timestamp).toLocaleTimeString()}</p>\n                    <p>Expected clearance: {new Date(incident.expected_clearance).toLocaleTimeString()}</p>\n                  </div>\n                </Popup>\n              </Circle>\n            ))}\n          </MapContainer>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}